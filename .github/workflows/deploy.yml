name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-leadforce
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      BASE_DIR: /srv/leadforce
      TARGET_DIR: /srv/leadforce/app
      SERVICE_NAME: leadforce
      SERVICE_USER: leadforce

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare VPS directories
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }} # добавь секрет SHA256:... от ssh-host
          script: |
            set -euo pipefail
            if ! command -v python3 >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y python3
            fi
            sudo apt-get update -y
            sudo apt-get install -y python3-venv

            if ! id "${{ env.SERVICE_USER }}" >/dev/null 2>&1; then
              sudo useradd -m -d "${{ env.BASE_DIR }}" -s /bin/bash "${{ env.SERVICE_USER }}"
            else
              sudo usermod -d "${{ env.BASE_DIR }}" "${{ env.SERVICE_USER }}"
              sudo chsh -s /bin/bash "${{ env.SERVICE_USER }}"
            fi

            sudo mkdir -p "${{ env.BASE_DIR }}" "${{ env.TARGET_DIR }}" "${{ env.BASE_DIR }}/logs" "${{ env.BASE_DIR }}/run"
            sudo python3 -m venv "${{ env.BASE_DIR }}/venv" || true
            sudo chown -R "${{ env.SERVICE_USER }}":"${{ env.SERVICE_USER }}" "${{ env.BASE_DIR }}"
            sudo chmod -R u=rwX,g=rX,o= "${{ env.BASE_DIR }}"
            sudo touch "${{ env.BASE_DIR }}/logs/gunicorn.access.log" "${{ env.BASE_DIR }}/logs/gunicorn.error.log"
            sudo chown -R "${{ env.SERVICE_USER }}":"${{ env.SERVICE_USER }}" "${{ env.BASE_DIR }}/logs"

      - name: Build deploy archive
        run: |
          set -euo pipefail
          mkdir -p output && touch output/.gitkeep || true
          tar -czf deploy.tgz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='venv' \
            --exclude='__pycache__' \
            --exclude='.pytest_cache' \
            --exclude='.mypy_cache' \
            --exclude='output/*' \
            app.py \
            requirements.txt \
            Templates \
            scripts

      - name: Check deploy.tgz exists
        run: ls -lh deploy.tgz

      - name: Upload deploy.tgz to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }}
          source: deploy.tgz
          target: /tmp/
          overwrite: true
          debug: true
          timeout: 600s # <-- с единицами!
          command_timeout: 600s # <-- с единицами!

      - name: Unpack on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }}
          script: |
            set -euo pipefail
            sudo mkdir -p "${{ env.TARGET_DIR }}"
            sudo tar -xzf /tmp/deploy.tgz -C "${{ env.TARGET_DIR }}"
            sudo chown -R "${{ env.SERVICE_USER }}":"${{ env.SERVICE_USER }}" "${{ env.TARGET_DIR }}"
            sudo rm -f /tmp/deploy.tgz

      - name: Run remote deploy script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }}
          script: |
            set -euo pipefail
            cd "${{ env.TARGET_DIR }}"
            chmod +x scripts/deploy.sh
            BASE_DIR="${{ env.BASE_DIR }}" \
            APP_DIR="${{ env.TARGET_DIR }}" \
            SERVICE_NAME="${{ env.SERVICE_NAME }}" \
            SERVICE_USER="${{ env.SERVICE_USER }}" \
            SERVICE_GROUP="${{ env.SERVICE_USER }}" \
            bash scripts/deploy.sh

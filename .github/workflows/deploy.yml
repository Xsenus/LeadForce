name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-leadforce
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      BASE_DIR: /srv/leadforce
      TARGET_DIR: /srv/leadforce/app
      SERVICE_NAME: leadforce
      SERVICE_USER: leadforce # <-- поставь root, если хочешь выполнять всё под root
      REPO_SSH: git@github.com:${{ github.repository }}.git

    steps:
      - name: Checkout (meta only)
        uses: actions/checkout@v4

      - name: Prepare VPS (packages, user, venv, ssh known_hosts)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }}
          script: |
            set -euo pipefail

            # Packages (ssh-keyscan в openssh-client; curl для healthcheck)
            sudo apt-get update -y
            sudo apt-get install -y git python3 python3-venv openssh-client curl

            # Ensure service user and home
            if ! id '${{ env.SERVICE_USER }}' >/dev/null 2>&1; then
              sudo useradd -m -d '${{ env.BASE_DIR }}' -s /bin/bash '${{ env.SERVICE_USER }}'
            else
              sudo usermod -d '${{ env.BASE_DIR }}' '${{ env.SERVICE_USER }}'
              sudo chsh -s /bin/bash '${{ env.SERVICE_USER }}'
            fi

            # Dirs & venv
            sudo mkdir -p '${{ env.BASE_DIR }}' '${{ env.TARGET_DIR }}' '${{ env.BASE_DIR }}/logs' '${{ env.BASE_DIR }}/run'
            sudo python3 -m venv '${{ env.BASE_DIR }}/venv' || true
            sudo chown -R '${{ env.SERVICE_USER }}':'${{ env.SERVICE_USER }}' '${{ env.BASE_DIR }}'
            sudo chmod -R u=rwX,g=rX,o= '${{ env.BASE_DIR }}'

            # ~/.ssh для SERVICE_USER
            sudo mkdir -p '${{ env.BASE_DIR }}/.ssh'
            sudo chown '${{ env.SERVICE_USER }}':'${{ env.SERVICE_USER }}' '${{ env.BASE_DIR }}/.ssh'
            sudo chmod 700 '${{ env.BASE_DIR }}/.ssh'

            # known_hosts (без sudo -u ... bash)
            ssh-keyscan github.com | sudo tee -a '${{ env.BASE_DIR }}/.ssh/known_hosts' >/dev/null || true
            sudo chown '${{ env.SERVICE_USER }}':'${{ env.SERVICE_USER }}' '${{ env.BASE_DIR }}/.ssh/known_hosts'
            sudo chmod 600 '${{ env.BASE_DIR }}/.ssh/known_hosts'

            # Deploy key должен существовать (private) и быть читаем SERVICE_USER
            if [ ! -f '${{ env.BASE_DIR }}/.ssh/github_deploy' ]; then
              echo 'Deploy key not found: ${{ env.BASE_DIR }}/.ssh/github_deploy'
              echo 'Create on VPS: sudo -u ${{ env.SERVICE_USER }} ssh-keygen -t ed25519 -N "" -f ${{ env.BASE_DIR }}/.ssh/github_deploy'
              echo 'Then add PUBLIC key (.pub) to GitHub → Settings → Deploy keys.'
              exit 1
            fi
            sudo chown '${{ env.SERVICE_USER }}':'${{ env.SERVICE_USER }}' '${{ env.BASE_DIR }}/.ssh/github_deploy' '${{ env.BASE_DIR }}/.ssh/github_deploy.pub'
            sudo chmod 600 '${{ env.BASE_DIR }}/.ssh/github_deploy'
            sudo chmod 644 '${{ env.BASE_DIR }}/.ssh/github_deploy.pub'

      - name: Pull & install on VPS (no SCP)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }}
          script: |
            set -euo pipefail
            APP_DIR='${{ env.TARGET_DIR }}'
            VENV_BIN='${{ env.BASE_DIR }}/venv/bin'

            # 1) Один раз: git будет всегда использовать нужный ключ
            sudo -H -u '${{ env.SERVICE_USER }}' git config --global core.sshCommand \
              'ssh -i /srv/leadforce/.ssh/github_deploy -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes'

            # 2) Клон либо обновление
            if [ ! -d "$APP_DIR/.git" ]; then
              sudo -H -u '${{ env.SERVICE_USER }}' git clone --depth=1 '${{ env.REPO_SSH }}' "$APP_DIR"
            else
              # ВАЖНО: насильно перевести origin на SSH (если раньше был https)
              sudo -H -u '${{ env.SERVICE_USER }}' git -C "$APP_DIR" remote set-url origin '${{ env.REPO_SSH }}'
              sudo -H -u '${{ env.SERVICE_USER }}' git -C "$APP_DIR" fetch --prune
              sudo -H -u '${{ env.SERVICE_USER }}' git -C "$APP_DIR" reset --hard origin/main
              sudo -H -u '${{ env.SERVICE_USER }}' git -C "$APP_DIR" clean -fdx
            fi

            # 3) Python deps
            '${{ env.BASE_DIR }}/venv/bin/python' -m ensurepip --upgrade || true
            sudo -H -u '${{ env.SERVICE_USER }}' ${VENV_BIN}/pip install --upgrade pip wheel setuptools
            if [ -f "$APP_DIR/requirements.txt" ]; then
              sudo -H -u '${{ env.SERVICE_USER }}' ${VENV_BIN}/pip install -r "$APP_DIR/requirements.txt"
            fi

            # 4) Рестарт сервиса
            sudo systemctl daemon-reload || true
            sudo systemctl restart '${{ env.SERVICE_NAME }}'

      - name: Healthcheck (local)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }}
          script: |
            set -euo pipefail
            sudo systemctl status '${{ env.SERVICE_NAME }}' --no-pager -l || true
            curl -sf -m 5 http://127.0.0.1:12345/ >/dev/null && echo 'OK' || (echo 'Healthcheck failed' && exit 1)
